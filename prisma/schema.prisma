generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("cAt")
  updatedAt DateTime @updatedAt @map("uAt")
  info      Info?
  events    Event[]  @relation("EventToPlayer")

  @@map("players")
}

model Event {
  id            Int        @id @default(autoincrement())
  date_formated String     @unique @map("date")
  title         String?    @default("Тренировка")
  isDraft       Boolean?   @default(false)
  eventInfo     EventInfo?
  pairs         Pair[]
  players       Player[]   @relation("EventToPlayer")

  @@map("events")
}

model Pair {
  id             Int   @id @default(autoincrement())
  firstPlayerId  Int
  secondPlayerId Int
  eventId        Int
  event          Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("pairs")
}

model EventInfo {
  id      Int     @id @default(autoincrement())
  eventId Int     @unique
  text    String?
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("eventInfo")
}

model Member {
  id     Int          @id @default(autoincrement())
  name   String
  drafts DraftEvent[] @relation("DraftEventToMember")

  @@map("members")
}

model DraftEvent {
  uuid    String   @id @default(uuid())
  members Member[] @relation("DraftEventToMember")

  @@map("drafts")
}

model Info {
  uuid       String @id @default(uuid())
  rttf_score Int?
  playerId   Int    @unique
  player     Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("infos")
}

model Master {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@map("masters")
}

model MasterEvent {
  id Int @id @default(autoincrement())

  @@map("masterEvents")
  @@ignore
}

model ReservedTable {
  id          Int @id @default(autoincrement())
  coachId     Int
  playerId    Int
  eventInfoId Int

  @@map("reserved_tables")
  @@ignore
}

enum UserRole {
  ADMIN
  GUEST
  MEMBER
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String   @map("hash_password")
  role     UserRole @default(GUEST)

  profile Profile?

  @@map("users")
}

model Profile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}
