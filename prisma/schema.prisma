// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_PRISMA_URL") // uses a direct connection
}

model Player {
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
  info   Info?

  @@map("players")
}

model Event {
  id Int @id @default(autoincrement())

  date_formated String  @unique @map("date")
  title         String? @default("Тренировка")

  players Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Info {
  uuid       String @id @default(uuid())
  rttf_score Int?

  playerId Int    @unique
  Player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("infos")
}

model User {
  id       Int       @id @default(autoincrement())
  uuid     String    @unique @default(uuid())
  nickname String    @unique
  password String
  role     UserRoles @default(guest)

  // accounts     Account[]
  // userSessions UserSession?
  // sessions     Session[]
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("users")
}

enum UserRoles {
  guest
  user
  admin
}

enum StpTagType {
  simple
  energy
  standart
  hitproof
  soundproof
  solarproof
  multi

  @@map("StpTagType")
}

enum StpSecureType {
  P2A
  none
  CM2
  CM3
}
