generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StpNumProp {
  id Int @id @default(autoincrement())

  stpName String @unique
  stp     Stp?   @relation(fields: [stpName], references: [name], onDelete: Cascade, onUpdate: Cascade)

  Ro     Float
  Rw     Int
  Lt     Int
  Lr     Int
  Ra     Int
  Det    Int
  Er     Int
  Ea     Int
  Sf     Int
  S      Float
  weight Int

  @@map("num-props")
}

model StpParam {
  id      Int           @id @default(autoincrement())
  stpName String        @unique
  stp     Stp           @relation(fields: [stpName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  cams    Int
  depth   Int
  secure  StpSecureType

  @@map("stp-params")
}

model Stp {
  id   Int    @id @default(autoincrement())
  name String @unique

  paramId      Int? @unique
  stpNumPropId Int? @unique

  StpParam   StpParam?
  StpNumProp StpNumProp?

  @@map("stps")
}

model User {
  id       Int       @id @default(autoincrement())
  uuid     String    @unique @default(uuid())
  nickname String    @unique
  password String
  role     UserRoles @default(guest)

  UserSession UserSession[]
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @updatedAt

  @@map("users")
}

model UserSession {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userUuid], references: [uuid])
  userUuid   String
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

enum UserRoles {
  guest
  user
  admin
}

enum StpTagType {
  simple
  energy
  standart
  hitproof
  soundproof
  solarproof
  multi

  @@map("StpTagType")
}

enum StpSecureType {
  P2A
  none
  CM2
  CM3
}
