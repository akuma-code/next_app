// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_PRISMA_URL_LOCAL") // uses a direct connection
}

model Player {
  id Int @id @default(autoincrement())

  name String

  info Info?

  events Event[]

  MasterEvent MasterEvent[]

  createdAt DateTime @default(now()) @map("cAt")
  updatedAt DateTime @updatedAt @map("uAt")

  @@map("players")
}

model Event {
  id Int @id @default(autoincrement())

  date_formated String  @unique @map("date")
  title         String? @default("Тренировка")
  isDraft       Boolean @default(false)

  players Player[]

  eventInfo EventInfo?

  @@map("events")
}

model EventInfo {
  id Int @id @default(autoincrement())

  eventId       Int          @unique
  event         Event        @relation(fields: [eventId], references: [id])
  masterEvent   MasterEvent?
  masterIventId Int?

  @@map("eventInfo")
}

model Member {
  id           Int                 @id @default(autoincrement())
  name         String
  drafts       DraftEvent[]
  instance     DraftEventInstance? @relation(fields: [instanceUuid], references: [uuid])
  instanceUuid String?

  @@map("members")
}

model DraftEvent {
  uuid    String   @id @default(uuid())
  members Member[]

  @@map("drafts")
}

model DraftEventInstance {
  uuid    String   @id @default(uuid())
  members Member[]

  @@map("instance")
}

model Master {
  id          Int           @id @default(autoincrement())
  name        String?
  masterEvent MasterEvent[]

  @@map("masters")
}

model MasterEvent {
  id      Int      @id @default(autoincrement())
  players Player[]

  master   Master @relation(fields: [masterId], references: [id])
  masterId Int

  eventInfo   EventInfo @relation(fields: [eventInfoId], references: [id])
  eventInfoId Int       @unique

  @@map("masterEvents")
}

model Info {
  uuid       String @id @default(uuid())
  rttf_score Int?

  playerId Int    @unique
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("infos")
}

// model Coach {
//   id          Int     @id @default(autoincrement())
//   first_name  String
//   second_name String?

//   // events  Event[]
//   // players Player[]

//   createdAt DateTime @default(now()) @map("cAt")
//   updatedAt DateTime @updatedAt @map("uAt")

//   @@unique([first_name, second_name], map: "name")
//   @@map("coaches")
// }

// enum Coaches {
//   Alan
//   Anton
// }
